[{"categories":["Hugo"],"content":"1 安装Hugo, 详情请参考文档: Hugo quickstart 到 Hugo Releases下载适合你的操作系统的版本,把 hugo （或者是 Windows 的 hugo.exe） 放到你的 环境变量 PATH 所在的目录，因为下一步我们将会用到它. ","date":"2023-07-14","objectID":"/cuidq/cuidq.github.io.git/hugo/:0:1","tags":["Hugo"],"title":"Hugo 搭建个人博客","uri":"/cuidq/cuidq.github.io.git/hugo/"},{"categories":["Hugo"],"content":"2 检查是否安装成功 hugo version 如果执行命令后出现如下内容，表示已安装成功: Hugo Static Site Generator v0.68.3-157669A0 linux/amd64 BuildDate: 2020-03-24T12:05:34Z ","date":"2023-07-14","objectID":"/cuidq/cuidq.github.io.git/hugo/:0:2","tags":["Hugo"],"title":"Hugo 搭建个人博客","uri":"/cuidq/cuidq.github.io.git/hugo/"},{"categories":["Hugo"],"content":"3 初始化 hugo new site [项目名称] 例如： hugo new site test 执行这个命令会创建一个名为test的目录，这就是你的博客根目录. 目录结构如下： ├── archetypes │ └── default.md ├── config.toml # 博客站点的配置文件 ├── content # 博客文章所在目录 ├── data ├── layouts # 网站布局 ├── static # 一些静态内容 └── themes # 博客主题 ","date":"2023-07-14","objectID":"/cuidq/cuidq.github.io.git/hugo/:0:3","tags":["Hugo"],"title":"Hugo 搭建个人博客","uri":"/cuidq/cuidq.github.io.git/hugo/"},{"categories":["Hugo"],"content":"4 创建博客文章 创建一个 my-first 页面： cd test hugo new my-first.md my-first.md 自动生成到了 content/my-first.md ，打开 my-first.md 看下: +++ date = “2015-10-25T08:36:54-07:00” draft = true title = “about” +++ 正文内容 ","date":"2023-07-14","objectID":"/cuidq/cuidq.github.io.git/hugo/:0:4","tags":["Hugo"],"title":"Hugo 搭建个人博客","uri":"/cuidq/cuidq.github.io.git/hugo/"},{"categories":["Hugo"],"content":"5 编写博客文章 你只需要按照Markdown 的格式编写自己的文章，让后将写好的文章放在test/content/posts，hugo 就会读取到这片文章，并将这片文章展示在比的博客中。 与普通Markdown 文章不一样的地方是，你需要在文章的开头写入如下结构的内容，这些内容包含在三杠线之间，在三杠线下边就是Markdown 的正文了： 这些内容会被hugo 解析，作为当前文章的一些属性，常用的属性如下： title: 文章标题. subtitle: 文章副标题. date: 这篇文章创建的日期时间. 它通常是从文章的前置参数中的 date 字段获取的, 但是也可以在 网站配置 中设置. lastmod: 上次修改内容的日期时间. draft: 如果设为 true, 除非 hugo 命令使用了 –buildDrafts/-D 参数, 这篇文章不会被渲染. author: 文章作者. authorLink: 文章作者的链接. description: 文章内容的描述. license: 这篇文章特殊的许可. tags: 文章的标签. categories: 文章所属的类别. hiddenFromHomePage: 如果设为 true, 这篇文章将不会显示在主页上, 但是此行为可以在 网站配置 中设置的. featuredImage: 文章的特色图片. featuredImagePreview: 用在主页预览的文章特色图片. toc: 如果设为 true, 这篇文章会显示右侧目录. autoCollapseToc: 如果设为 true, 文章目录会自动折叠. math: 如果设为 true, 将自动渲染文章中的数学公式. mapbox: 和 网站配置 中的 params.mapbox 对象相同. lightgallery: 如果设为 true, 文章中的图片将可以按照画廊形式呈现. linkToMarkdown: 如果设为 true, 内容的页脚将显示指向原始 Markdown 文件的链接. share: 和 网站配置 中的 params.share 对象相同. comment: 如果设为 true, 将启用评论系统. ","date":"2023-07-14","objectID":"/cuidq/cuidq.github.io.git/hugo/:0:5","tags":["Hugo"],"title":"Hugo 搭建个人博客","uri":"/cuidq/cuidq.github.io.git/hugo/"},{"categories":["Hugo"],"content":"6 启动服务 hugo server 执行这个命令后出现以下内容，表示服务启动成功，可以看到服务默认会在占用1313 端口，在浏览器中访问http://localhost:1313/ 地址即可访问博客。 | EN ——————-+—– Pages | 29 Paginator pages | 0 Non-page files | 0 Static files | 1 Processed images | 0 Aliases | 12 Sitemaps | 1 Cleaned | 0 Built in 60 ms Watching for changes in /home/wp/t/myblog/{archetypes,content,data,layouts,static,themes} Watching for config changes in /home/wp/t/myblog/config.toml Environment: “development” Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server –disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop 注意\r\r默认情况下, 所有文章和页面均作为草稿创建. 如果想要渲染这些页面, 请从元数据中删除属性 draft: true, 设置属性 draft: false 或者为 hugo 命令添加 -D/--buildDrafts 参数.\r\r ","date":"2023-07-14","objectID":"/cuidq/cuidq.github.io.git/hugo/:0:6","tags":["Hugo"],"title":"Hugo 搭建个人博客","uri":"/cuidq/cuidq.github.io.git/hugo/"},{"categories":["Hugo"],"content":"7 主题配置 这里使用的是LoveIt， 如果想使用其他主题，请自行到github 上下载主题，更换步骤都一样. 安装主题，LoveIt 主题的仓库是: https://github.com/dillonzq/LoveIt. 你可以下载主题的 最新版本 .zip 文件 并且解压放到 themes 目录. 另外, 也可以直接把这个主题克隆到 themes 目录: git clone https://github.com/dillonzq/LoveIt.git themes/LoveIt 或者, 初始化你的项目目录为 git 仓库, 并且把主题仓库作为你的网站目录的子模块: git init git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt baseURL = \"http://example.org/\" # [en, zh-cn, fr, ...] 设置默认的语言 defaultContentLanguage = \"zh-cn\" # 网站语言, 仅在这里 CN 大写 languageCode = \"zh-CN\" # 是否包括中日韩文字 hasCJKLanguage = true # 网站标题 title = \"我的全新 Hugo 网站\" # 更改使用 Hugo 构建网站时使用的默认主题 theme = \"LoveIt\" [params] # LoveIt 主题版本 version = \"0.2.X\" [menu] [[menu.main]] identifier = \"posts\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" name = \"文章\" url = \"/posts/\" # 当你将鼠标悬停在此菜单链接上时, 将显示的标题 title = \"\" weight = 1 [[menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 2 [[menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" weight = 3 # Hugo 解析文档的配置 [markup] # 语法高亮设置 (https://gohugo.io/content-management/syntax-highlighting) [markup.highlight] # false 是必要的设置 (https://github.com/dillonzq/LoveIt/issues/158) noClasses = false 注意\r\r在构建网站时, 你可以使用 --theme 选项设置主题. 但是, 我建议你修改配置文件 (config.toml) 将本主题设置为默认主题.\r\r ","date":"2023-07-14","objectID":"/cuidq/cuidq.github.io.git/hugo/:0:7","tags":["Hugo"],"title":"Hugo 搭建个人博客","uri":"/cuidq/cuidq.github.io.git/hugo/"},{"categories":["Hugo"],"content":"8 部署 假设你需要部署在 GitHub Pages 上，首先在GitHub上创建一个Repository，命名为：coderzh.github.io （coderzh替换为你的github用户名）。 在站点根目录执行 Hugo 命令生成最终页面： Hugo 的运行环境\r\rhugo serve 的默认运行环境是 development, 而 hugo 的默认运行环境是 production. 由于本地 development 环境的限制, 评论系统, CDN 和 fingerprint 不会在 development 环境下启用. 你可以使用 hugo serve -e production 命令来开启这些特性. \r\r ","date":"2023-07-14","objectID":"/cuidq/cuidq.github.io.git/hugo/:0:8","tags":["Hugo"],"title":"Hugo 搭建个人博客","uri":"/cuidq/cuidq.github.io.git/hugo/"},{"categories":["Mysql"],"content":"命令 SQL 查询 父查子 SELECT u2.* FROM ( SELECT @ids AS p_ids, (SELECT @ids := GROUP_CONCAT(id) FROM ec_app_category where status= 1 and is_del = 0 and FIND_IN_SET(pid, @ids)) AS c_ids, @l := @l+1 AS LEVEL FROM ec_app_category, (SELECT @ids := 0, @l := 0 ) b #此处为需要传递的父类id. WHERE @ids IS NOT NULL ) u1 JOIN ec_app_category u2 ON FIND_IN_SET(u2.id, u1.p_ids) and u2.status= 1 and u2.is_del = 0 AND u2.id != 0 and u2.pid = 0; This is a tip\r\r 需要包含自己, 则删掉 != \r\r 子查父 SELECT t2.id, t2.cate_name as name FROM ( SELECT @r AS p_ids, (SELECT @r := pid FROM ec_activity_category WHERE id = p_ids) AS pid FROM (SELECT @r:= 22) vars, ec_activity_category AS h WHERE @r != 0 ) t1 JOIN ec_activity_category t2 ON t1.p_ids = t2.id order by t2.id; ","date":"2023-07-13","objectID":"/cuidq/cuidq.github.io.git/mysql/:0:0","tags":["Mysql"],"title":"Mysql","uri":"/cuidq/cuidq.github.io.git/mysql/"}]